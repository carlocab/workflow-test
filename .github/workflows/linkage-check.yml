name: Formula dependents linkage check
run-name: Check linkage for dependents of ${{ inputs.formula }}

on:
  workflow_dispatch:
    inputs:
      formula:
        description: Formula name
        required: false
        type: string
      linked-formula:
        description: Formula to check linkage with
        required: false
        type: string
      branch:
        description: Branch to checkout
        required: false
        default: master
        type: string
      job-size:
        description: Number of dependents per matrix job
        required: false
        default: 10
        type: number
      runner:
        description: Runner to check linkage on
        required: false
        default: ubuntu-latest
        type: string

env:
  GITHUB_ACTIONS_MATRIX_JOB_LIMIT: 256
  HOMEBREW_NO_INSTALL_FROM_API: 1
  HOMEBREW_NO_AUTO_UPDATE: 1
  HOMEBREW_NO_INSTALLED_DEPENDENTS_CHECK: 1
  FORMULA: ${{ inputs.formula }}
  LINKED_FORMULA: ${{ inputs.linked-formula }}
  SIZE: ${{ inputs.job-size }}

jobs:
  generate-matrix:
    runs-on: ubuntu-latest
    container:
      image: ghcr.io/homebrew/ubuntu22.04:master
      options: --user=linuxbrew
    outputs:
      matrix: ${{ steps.matrix.outputs.matrix }}
    defaults:
      run:
        shell: bash
    steps:
      - uses: Homebrew/actions/setup-homebrew@master
        with:
          test-bot: false

      - if: inputs.branch != 'master'
        env:
          BRANCH: ${{ inputs.branch }}
        run: |
          cd "$(brew --repository homebrew/core)"
          git fetch origin "$BRANCH"
          git checkout "$BRANCH"

      - if: startsWith(inputs.runner, 'macos')
        run: echo "HOMEBREW_SIMULATE_MACOS_ON_LINUX=1" >> "${GITHUB_ENV}"

      - id: matrix
        run: |
          if [[ -z "${FORMULA}" ]]
          then
            brew formulae
          else
            brew uses --eval-all --recursive "${FORMULA}"
          fi | xargs printf '"%s"\n' | jq --compact-output --slurp > formulae.json

          jq --compact-output "[_nwise(${SIZE})]" formulae.json > split.json

          split_length="$(jq --raw-output length split.json)"

          if [[ "${split_length}" -gt "${GITHUB_ACTIONS_MATRIX_JOB_LIMIT}" ]]
          then
            echo "::error ::Cannot dispatch ${split_length} jobs!"
            echo "::error ::GitHub Actions can generate only ${GITHUB_ACTIONS_MATRIX_JOB_LIMIT} jobs per workflow run."
            echo "::error ::You can try again with a larger \`job-size\` input."
            exit 1
          fi

          matrix="$(
            seq "$split_length" | jq --slurp --compact-output '[.[] - 1]'
          )"
          echo "matrix=$matrix" >> "$GITHUB_OUTPUT"

      - uses: actions/upload-artifact@main
        with:
          name: formulae
          path: split.json

  check-linkage:
    needs: generate-matrix
    strategy:
      matrix:
        index: ${{ fromJson(needs.generate-matrix.outputs.matrix) }}
      fail-fast: false
    runs-on: ${{ inputs.runner }}
    continue-on-error: true
    container:
      image: ghcr.io/homebrew/ubuntu22.04:master
      options: --user=linuxbrew
    defaults:
      run:
        shell: bash
    steps:
      - uses: Homebrew/actions/setup-homebrew@master
        with:
          test-bot: false

      - if: inputs.branch != 'master'
        env:
          BRANCH: ${{ inputs.branch }}
        run: |
          cd "$(brew --repository homebrew/core)"
          git fetch origin "$BRANCH"
          git checkout "$BRANCH"

      - uses: actions/download-artifact@main
        with:
          name: formulae

      - id: bottle-tag
        shell: brew ruby {0}
        run: |
          File.open(ENV["GITHUB_OUTPUT"], "a") do |f|
            f.puts("tag=#{Utils::Bottles.tag}")
          end

      - run: |
          formulae=($(jq --raw-output ".[${INDEX}][]" split.json))
          formulae_json="$(brew info --json=v2 ${formulae[@]})"
          installable_formulae=($(
            jq --raw-output \
              '.formulae[] |
                select(
                  (.bottle.stable.files.${{ steps.bottle-tag.outputs.tag }} != null or .bottle.stable.files.all != null) and
                  (.disabled | not)
                ) |
                .full_name' <<< "$formulae_json"
          ))

          linkage_check="${LINKED_FORMULA:-${FORMULA}}"
          for formula in ${installable_formulae[@]}
          do
            echo "Installing ${formula}..."
            if ! brew install --quiet --force --overwrite --skip-post-install "$formula"
            then
              echo "::warning ::Encountered an error while installing ${formula}"
            fi
            formulae="$(brew list --formulae)"
            [[ -n "$formulae" ]] && xargs brew unlink <<< $formulae # Handle formula conflicts

            if brew linkage $formula | grep -E -q "\(${linkage_check}\)$"
            then
              echo "::notice ::${formula} has linkage with ${linkage_check}!"
              echo "${formula}" >> "linkage-${INDEX}.txt"
              brew linkage --cached "${formula}" >> "output-${INDEX}.txt"
            fi
            brew developer off
          done
        env:
          INDEX: ${{ matrix.index }}

      - uses: actions/upload-artifact@main
        with:
          name: linkage
          path: linkage-${{ matrix.index }}.txt
          if-no-files-found: ignore

      - uses: actions/upload-artifact@main
        with:
          name: output
          path: output-${{ matrix.index }}.txt
          if-no-files-found: ignore

  conclusion:
    needs: check-linkage
    runs-on: ubuntu-latest
    steps:
      - uses: actions/download-artifact@main
        with:
          name: linkage

      - run: |
          linkage_check="${LINKED_FORMULA:-${FORMULA}}"
          printf "## Dependents of \`${FORMULA}\` with linkage to \`${linkage_check}\`\n" >> "${GITHUB_STEP_SUMMARY}"
          printf '```\n' >> "${GITHUB_STEP_SUMMARY}"
          sort linkage-*.txt >> "${GITHUB_STEP_SUMMARY}"
          printf '```\n' >> "${GITHUB_STEP_SUMMARY}"

      - uses: actions/download-artifact@main
        with:
          name: output

      - run: cat output-*.txt > output.txt

      - uses: actions/upload-artifact@main
        with:
          name: brew-output
          path: output.txt
          if-no-files-found: ignore
